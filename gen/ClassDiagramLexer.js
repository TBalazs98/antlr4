// Generated from ClassDiagram.g4 by ANTLR 4.12.0
// jshint ignore: start
import antlr4 from 'antlr4';


const serializedATN = [4,0,21,200,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,
4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,
12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,
2,20,7,20,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,
1,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,
4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,
5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,
7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,
7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,
7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,161,8,7,1,8,1,8,4,8,165,
8,8,11,8,12,8,166,3,8,169,8,8,1,9,4,9,172,8,9,11,9,12,9,173,1,10,1,10,1,
11,1,11,1,12,1,12,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,17,
1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,20,0,0,21,1,1,3,2,5,3,7,4,9,5,11,6,
13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,
19,39,20,41,21,1,0,5,1,0,48,57,3,0,48,57,65,90,97,122,3,0,35,35,43,43,45,
45,2,0,10,10,13,13,2,0,9,9,32,32,205,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,
0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,
0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,
1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,
0,41,1,0,0,0,1,43,1,0,0,0,3,52,1,0,0,0,5,59,1,0,0,0,7,65,1,0,0,0,9,75,1,
0,0,0,11,88,1,0,0,0,13,96,1,0,0,0,15,160,1,0,0,0,17,168,1,0,0,0,19,171,1,
0,0,0,21,175,1,0,0,0,23,177,1,0,0,0,25,179,1,0,0,0,27,183,1,0,0,0,29,185,
1,0,0,0,31,187,1,0,0,0,33,189,1,0,0,0,35,191,1,0,0,0,37,193,1,0,0,0,39,195,
1,0,0,0,41,197,1,0,0,0,43,44,5,97,0,0,44,45,5,98,0,0,45,46,5,115,0,0,46,
47,5,116,0,0,47,48,5,114,0,0,48,49,5,97,0,0,49,50,5,99,0,0,50,51,5,116,0,
0,51,2,1,0,0,0,52,53,5,115,0,0,53,54,5,116,0,0,54,55,5,97,0,0,55,56,5,116,
0,0,56,57,5,105,0,0,57,58,5,99,0,0,58,4,1,0,0,0,59,60,5,99,0,0,60,61,5,108,
0,0,61,62,5,97,0,0,62,63,5,115,0,0,63,64,5,115,0,0,64,6,1,0,0,0,65,66,5,
105,0,0,66,67,5,110,0,0,67,68,5,116,0,0,68,69,5,101,0,0,69,70,5,114,0,0,
70,71,5,102,0,0,71,72,5,97,0,0,72,73,5,99,0,0,73,74,5,101,0,0,74,8,1,0,0,
0,75,76,5,114,0,0,76,77,5,101,0,0,77,78,5,108,0,0,78,79,5,97,0,0,79,80,5,
116,0,0,80,81,5,105,0,0,81,82,5,111,0,0,82,83,5,110,0,0,83,84,5,115,0,0,
84,85,5,104,0,0,85,86,5,105,0,0,86,87,5,112,0,0,87,10,1,0,0,0,88,89,5,101,
0,0,89,90,5,120,0,0,90,91,5,116,0,0,91,92,5,101,0,0,92,93,5,110,0,0,93,94,
5,100,0,0,94,95,5,115,0,0,95,12,1,0,0,0,96,97,5,105,0,0,97,98,5,109,0,0,
98,99,5,112,0,0,99,100,5,108,0,0,100,101,5,101,0,0,101,102,5,109,0,0,102,
103,5,101,0,0,103,104,5,110,0,0,104,105,5,116,0,0,105,106,5,115,0,0,106,
14,1,0,0,0,107,108,5,97,0,0,108,109,5,115,0,0,109,110,5,115,0,0,110,111,
5,111,0,0,111,112,5,99,0,0,112,113,5,105,0,0,113,114,5,97,0,0,114,115,5,
116,0,0,115,116,5,105,0,0,116,117,5,111,0,0,117,161,5,110,0,0,118,119,5,
100,0,0,119,120,5,105,0,0,120,121,5,114,0,0,121,122,5,101,0,0,122,123,5,
99,0,0,123,124,5,116,0,0,124,125,5,101,0,0,125,126,5,100,0,0,126,127,5,95,
0,0,127,128,5,97,0,0,128,129,5,115,0,0,129,130,5,115,0,0,130,131,5,111,0,
0,131,132,5,99,0,0,132,133,5,105,0,0,133,134,5,97,0,0,134,135,5,116,0,0,
135,136,5,105,0,0,136,137,5,111,0,0,137,161,5,110,0,0,138,139,5,99,0,0,139,
140,5,111,0,0,140,141,5,109,0,0,141,142,5,112,0,0,142,143,5,111,0,0,143,
144,5,115,0,0,144,145,5,105,0,0,145,146,5,116,0,0,146,147,5,105,0,0,147,
148,5,111,0,0,148,161,5,110,0,0,149,150,5,97,0,0,150,151,5,103,0,0,151,152,
5,103,0,0,152,153,5,114,0,0,153,154,5,101,0,0,154,155,5,103,0,0,155,156,
5,97,0,0,156,157,5,116,0,0,157,158,5,105,0,0,158,159,5,111,0,0,159,161,5,
110,0,0,160,107,1,0,0,0,160,118,1,0,0,0,160,138,1,0,0,0,160,149,1,0,0,0,
161,16,1,0,0,0,162,169,5,42,0,0,163,165,7,0,0,0,164,163,1,0,0,0,165,166,
1,0,0,0,166,164,1,0,0,0,166,167,1,0,0,0,167,169,1,0,0,0,168,162,1,0,0,0,
168,164,1,0,0,0,169,18,1,0,0,0,170,172,7,1,0,0,171,170,1,0,0,0,172,173,1,
0,0,0,173,171,1,0,0,0,173,174,1,0,0,0,174,20,1,0,0,0,175,176,7,2,0,0,176,
22,1,0,0,0,177,178,7,3,0,0,178,24,1,0,0,0,179,180,7,4,0,0,180,181,1,0,0,
0,181,182,6,12,0,0,182,26,1,0,0,0,183,184,5,40,0,0,184,28,1,0,0,0,185,186,
5,41,0,0,186,30,1,0,0,0,187,188,5,58,0,0,188,32,1,0,0,0,189,190,5,59,0,0,
190,34,1,0,0,0,191,192,5,44,0,0,192,36,1,0,0,0,193,194,5,95,0,0,194,38,1,
0,0,0,195,196,5,33,0,0,196,40,1,0,0,0,197,198,5,46,0,0,198,199,5,46,0,0,
199,42,1,0,0,0,5,0,160,166,168,173,1,6,0,0];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class ClassDiagramLexer extends antlr4.Lexer {

    static grammarFileName = "ClassDiagram.g4";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	static modeNames = [ "DEFAULT_MODE" ];
	static literalNames = [ null, "'abstract'", "'static'", "'class'", "'interface'", 
                         "'relationship'", "'extends'", "'implements'", 
                         null, null, null, null, null, null, null, null, 
                         "':'", "';'", "','", "'_'", "'!'", "'..'" ];
	static symbolicNames = [ null, "ABSTRACT", "STATIC", "CLASS", "INTERFACE", 
                          "RELATIONSHIP", "EXTENDS", "IMPLEMENTS", "RELATIONSHIP_TYPE", 
                          "COUNT", "NAME", "VISIBILITY", "NEWLINE", "WHITESPACE", 
                          "BRACKET_START", "BRACKET_END", "COLON", "SEMI_COLON", 
                          "COMMA", "DASH", "END", "DOUBLE_POINT" ];
	static ruleNames = [ "ABSTRACT", "STATIC", "CLASS", "INTERFACE", "RELATIONSHIP", 
                      "EXTENDS", "IMPLEMENTS", "RELATIONSHIP_TYPE", "COUNT", 
                      "NAME", "VISIBILITY", "NEWLINE", "WHITESPACE", "BRACKET_START", 
                      "BRACKET_END", "COLON", "SEMI_COLON", "COMMA", "DASH", 
                      "END", "DOUBLE_POINT" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.atn.PredictionContextCache());
    }
}

ClassDiagramLexer.EOF = antlr4.Token.EOF;
ClassDiagramLexer.ABSTRACT = 1;
ClassDiagramLexer.STATIC = 2;
ClassDiagramLexer.CLASS = 3;
ClassDiagramLexer.INTERFACE = 4;
ClassDiagramLexer.RELATIONSHIP = 5;
ClassDiagramLexer.EXTENDS = 6;
ClassDiagramLexer.IMPLEMENTS = 7;
ClassDiagramLexer.RELATIONSHIP_TYPE = 8;
ClassDiagramLexer.COUNT = 9;
ClassDiagramLexer.NAME = 10;
ClassDiagramLexer.VISIBILITY = 11;
ClassDiagramLexer.NEWLINE = 12;
ClassDiagramLexer.WHITESPACE = 13;
ClassDiagramLexer.BRACKET_START = 14;
ClassDiagramLexer.BRACKET_END = 15;
ClassDiagramLexer.COLON = 16;
ClassDiagramLexer.SEMI_COLON = 17;
ClassDiagramLexer.COMMA = 18;
ClassDiagramLexer.DASH = 19;
ClassDiagramLexer.END = 20;
ClassDiagramLexer.DOUBLE_POINT = 21;



